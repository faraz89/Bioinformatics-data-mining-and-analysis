import subprocess32
from os import path
import sys

#Store all the assemblies in a list.
Assembly_list='/local/khanf/Pan-genome/automate-PanGenome/Assembly_list.txt'
#Start with the original reference
cassava_0='cassava-v7.fasta'

count = 0

#Iterate over the list of all the assemblies.
for zline in open(Assembly_list):
    zline = zline.rstrip('\n')
    #Run perl script to remove contigs < 1KB.
    cmd_kb_contig = 'perl filter-seq-by-length.pl 1000 %s > %s_kb.fasta' % (zline,zline.split('.')[0])
    print cmd_kb_contig
    print "#"*100
    output_kb_contigs=zline.split('.')[0]+"_kb.fasta"
    subprocess32.call(cmd_kb_contig,shell=True)
    #Get contig names.
    cmd_getallcontigIDs = "cat %s | grep '>' | sed 's/>//g' | sort | uniq > %s_allcontigs.txt" % (output_kb_contigs,output_kb_contigs)
    print cmd_getallcontigIDs
    print "#"*100
    subprocess32.call(cmd_getallcontigIDs,shell=True)
    allcontigids = output_kb_contigs+"_allcontigs.txt"
    #Make blastdatabase for reference.
    cmd_bdb = 'makeblastdb -in %s -dbtype nucl' % (cassava_0)
    print cmd_bdb
    print "#"*100
    subprocess32.call(cmd_bdb,shell=True)
    #Run Blastn to identify contigs that have >=95% identity and >=95% coverage to reference.
    cmd_blastn = "blastn -db %s -query %s -outfmt '6 qseqid sseqid sstrand qlen slen qstart qend sstart send score length pident mismatch qcovs' -evalue 1e-25 -perc_identity 95 -num_threads 24 -max_target_seqs 1 -out %s.blast.out" % (cassava_0,output_kb_contigs,output_kb_contigs)
    print cmd_blastn
    print "#"*100
    subprocess32.call(cmd_blastn,shell=True)
    blastn_output = output_kb_contigs+".blast.out"
    #Use python script to extract contigs that have >=95% Identity and >=95% Coverage.
    cmd_blastn_parser = 'python blast_parser.py %s  > %s_to_filter.txt && cat %s_to_filter.txt | sort | uniq > %s_to_filter2.txt && rm %s_to_filter.txt && mv %s_to_filter2.txt %s_to_filter.txt' % (blastn_output,output_kb_contigs,output_kb_contigs,output_kb_contigs,output_kb_contigs,output_kb_contigs,output_kb_contigs)
    print cmd_blastn_parser
    print "#"*100
    subprocess32.call(cmd_blastn_parser,shell=True)
    blastn_parser_output = output_kb_contigs+"_to_filter.txt"
    #Filter out contigs which have >=95% Identity and >=95% Coverage to Reference.
    cmd_filter_RefSeq = "comm -13 %s %s > %s_filtered_contigs.list" % (blastn_parser_output,allcontigids,output_kb_contigs)
    print cmd_filter_RefSeq
    print "#"*100
    subprocess32.call(cmd_filter_RefSeq,shell=True)
    filter_RefSeq_output = output_kb_contigs+"_filtered_contigs.list"
    #Get sequence of filtered contigs which DO NOT have >=95% Identity and >=95% Coverage to Reference.
    cmd_subseq_assembly = "/scratch/software/seqtk/seqtk subseq %s %s > %s.fasta" % (output_kb_contigs,filter_RefSeq_output,filter_RefSeq_output)
    print cmd_subseq_assembly
    print "#"*100
    subprocess32.call(cmd_subseq_assembly,shell=True)
    subseq_assembly_output = filter_RefSeq_output+".fasta"
    #Run deduplication of filtered_contigs.fasta using BBMap.
    cmd_dedupe_BBmap = "/scratch/software/BBMap/bbmap/dedupe.sh -Xmx100g in=%s out=dedupe_non_redun_%s outd=dedupe_redun_%s minidentity=90 minlengthpercent=0 minoverlappercent=90" % (subseq_assembly_output,subseq_assembly_output,subseq_assembly_output)
    print cmd_dedupe_BBmap
    print "#"*100
    subprocess32.call(cmd_dedupe_BBmap,shell=True)
    dedupe_BBmap_output = "dedupe_non_redun_"+subseq_assembly_output
    #Make blast database for the output fasta file from BBMap.
    cmd_blastdb = "makeblastdb -in %s -dbtype nucl" % (dedupe_BBmap_output)
    print cmd_blastdb
    print "#"*100
    subprocess32.call(cmd_blastdb,shell=True)
    #Run second iteration of deduplication using blastn on the non-redundant output file generated by BBMap.
    cmd_blastn_dedupe = "blastn -db %s -query %s -outfmt '6 qseqid sseqid sstrand qlen slen qstart qend sstart send score length pident mismatch qcovs' -evalue 1e-25 -perc_identity 90 -num_threads 24 -max_target_seqs 2 -out %s.blast.out" % (dedupe_BBmap_output,dedupe_BBmap_output,dedupe_BBmap_output)
    print cmd_blastn_dedupe
    print "#"*100
    subprocess32.call(cmd_blastn_dedupe,shell=True)
    blastn_dedupe_output = dedupe_BBmap_output+".blast.out"
    #Use python script to extract contigs that have >=90% Identity and >=90% Coverage to other contigs.
    cmd_blastn_parser_dup_check = "python blast_parser_dup_check.py %s > %s_to_filter_intradup.txt && cat %s_to_filter_intradup.txt | sort | uniq > %s_to_filter_intradup2.txt && rm %s_to_filter_intradup.txt && mv %s_to_filter_intradup2.txt %s_to_filter_intradup.txt" % (blastn_dedupe_output,output_kb_contigs,output_kb_contigs,output_kb_contigs,output_kb_contigs,output_kb_contigs,output_kb_contigs)
    print cmd_blastn_parser_dup_check
    print "#"*100
    subprocess32.call(cmd_blastn_parser_dup_check,shell=True)
    blastn_parser_dup_check_output = output_kb_contigs+"_to_filter_intradup.txt"
    #Get contig names of the non redundant set.
    cmd_getallcontigIDs_non_redun_set = "cat %s | grep '>' | sed 's/>//g' | sort | uniq > %s_contigs_list_no_ref.txt" % (dedupe_BBmap_output,output_kb_contigs) 
    print cmd_getallcontigIDs_non_redun_set
    print "#"*100
    subprocess32.call(cmd_getallcontigIDs_non_redun_set,shell=True)
    getallcontigIDs_non_redun_set_output = output_kb_contigs+"_contigs_list_no_ref.txt"
    #Filter out contigs which have >=90% Identity and >=90% Coverage to other contigs.
    cmd_filter_dup_seq = "comm -13 %s %s > %s_nodup_noref.list" % (blastn_parser_dup_check_output,getallcontigIDs_non_redun_set_output,output_kb_contigs)
    print cmd_filter_dup_seq
    print "#"*100
    subprocess32.call(cmd_filter_dup_seq,shell=True)
    filter_dup_seq_output = output_kb_contigs+"_nodup_noref.list"
    #Get sequence of filtered contigs which DO NOT have >=90% Identity and >=90% Coverage to other contigs.
    cmd_subseq_assembly_2 = "/scratch/software/seqtk/seqtk subseq %s %s > %s_nodup_noref.fasta" % (dedupe_BBmap_output,filter_dup_seq_output,output_kb_contigs)
    print cmd_subseq_assembly_2
    print "#"*100
    subprocess32.call(cmd_subseq_assembly_2,shell=True)
    subseq_assembly_2_output = output_kb_contigs+"_nodup_noref.fasta"
    #Rename the contigs.
    cmd_rename_contigs = "/scratch/software/seqtk/seqtk rename %s %s > %s_final_contigs.fasta" % (subseq_assembly_2_output,zline.split('.')[0]+"_",zline.split('.')[0])
    print cmd_rename_contigs
    print "#"*100
    subprocess32.call(cmd_rename_contigs,shell=True)
    rename_contigs_output = zline.split('.')[0]+"_final_contigs.fasta"
    #Update the Reference Iteratively. This action will be repeated iteratively with the updated reference at each iteration.
    cmd_update_reference = "cat %s %s > %s" % (cassava_0,rename_contigs_output,"cassava-"+str(count+1)+"_v7.fasta")
    print cmd_update_reference
    print "#"*100
    subprocess32.call(cmd_update_reference,shell=True)
    update_reference_output = "cassava-"+str(count+1)+"_v7.fasta"
    count += 1
    #Update the reference at each iteration.
    cassava_0 = update_reference_output
    print cassava_0
