## Faraz Khan 04.07.16
rm(list=ls())
library(edgeR)
options(scipen = 500) # bias against scientific notation
options(digits = 1) # show fewer decimal places

samples <- read.delim("TN_DEG_all_stages.txt",row.names=1)
x = samples[,c(19,23,27,20,24,28,31,33,35,21,25,29,22,26,30,32,34,36)]
group <- factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6)) #group samples
y <- DGEList(counts=x,group=group) #create DGElist
#dim(y)
## Since the smallest group size is Three, we keep genes that achieve at least one count per million (cpm) in at least Three samples:
keep <- rowSums(cpm(y)>1) >= 3
y <- y[keep, , keep.lib.sizes=FALSE] 
dim(y)
## Re-compute the library sizes:
y$samples$lib.size <- colSums(y$counts)
## Compute effective library sizes using TMM normalization:
y <- calcNormFactors(y)
edgeR.cpm.norm1 = cpm(as.matrix(y), normalized.sizes = TRUE)
library(maSigPro)
d <- make.design.matrix(`eDesign(masigpro)`) # upload your design matrix (see maSigPro Vignettes on how to make a eDesign matrix)
library(MASS)
TN.p <- p.vector(edgeR.cpm.norm1, d, counts=TRUE, theta = 10)
TN.fit <- T.fit(TN.p)
write.csv(TN.fit$sol, file="TN_CvsD_all_DE_list_Regression_stats.csv")
write.csv(TN.fit$influ.info, "influ.info_outliers.csv")
sigs<-get.siggenes(TN.fit, rsq = 0.6, vars="groups")
sigs_significant_DEG = write.csv(sigs$sig.genes$DroughtvsControl$sig.pvalues, file="Sigs_Droughtvscontrol_DEG_rsq=0.6.csv")
#Results summary
sigs$summary
names(sigs$sig.genes$DroughtvsControl$sig.profiles)
names(sigs$sig.genes$DroughtvsControl)
names(sigs$sig.genes$DroughtvsControl$sig.profiles)
venn = suma2Venn(sigs$summary[, c(1:2)])
#Graph plotting
PlotGroups(TN.fit$sig.profiles, edesign = `eDesign(masigpro)`, groups = `eDesign(masigpro)`[,c(3:ncol(`eDesign(masigpro)`))], repvect = `eDesign(masigpro)`[,2], step.method = "backward", min.obs = 2, alfa = 0.05,nvar.correction = FALSE, show.lines = TRUE,groups.vector = NULL, xlab = "Time", ylab = "Expression value")
cluster= see.genes(sigs$sig.genes$DroughtvsControl$sig.profiles, edesign = `eDesign(masigpro)`, cluster.data = sigs$sig.genes$DroughtvsControl$sig.profiles, cluster.method = "hclust")
write.csv(cluster$cut, file="DroughtvsControl.csv")
